conectarSuperPeer:
	Variáveis:
		sp' = referência ao contexto local do super-peer
		spi = referência a um super-peer remoto i
		msgi = referência a mensagem de entrada recebida por um super-peer i
	Entrada:
		msgi = nulo.
	Ação:
		Quando um super-peer deseja conectar-se ao ambiente.
		
		conectado = Falso;
		se tamanho(sp'.listaSuperPeers) == 0 então
			conectado = Verdadeiro;
		senão:
			para todo(spi) em sp'.listaSuperPeers faça
				inicio
					msgId = gerarMsgId();
					sourceId = sp'.id;
					targetId = spi.id;
					ttl = sp'.configuracao.ttl;
					hops = 0;
					
					enviar JOIN_SUPER_PEER(msgId, sourceId, targetId, ttl, hops);
				fim; 
	
	Entrada:
		msgi = JOIN_SUPER_PEER(msgId, sourceId, targetId, ttl, hops)
	Ação:
		se sp'.superPeers == sp'.configuracao.numMaxSuperPeers então
			início
				msgId = gerarMsgId();
				sourceId = targetId;
				targetId = sourceId;
				ttl = sp'.configuracao.ttl;
				hops = 0;
				
				enviar REJECTED_NUM_MAX_SUPER_PEERS(msgId, sourceId, targetId, ttl, hops);
			fim
		senão
			início
				msgId = gerarMsgId();
				sourceId = msgi.targetId;
				targetId = msgi.sourceId;
				ttl = sp'.configuracao.ttl;
				hops = 0;
								
				enviar ACCEPT_JOIN_SUPER_PEER(msgId, sourceId, targetId, ttl, hops);
				
				reservarSlotSuperPeer(spi.id, sp'.configuracao.tempoEsperaRetorno);
			fim;
				
	Entrada:
		msgi = 	REJECTED_NUM_MAX_SUPER_PEERS(msgId, sourceId, targetId, ttl, hops)
	Ação:
		cancelar();
		
	Entrada:
		msgi = ACCEPT_JOIN_SUPER_PEER(msgId, sourceId, targetId, ttl, hops)
	Ação:
		se sp'.superPeers == sp'.configuracao.numMaxSuperPeers então
			início
				msgId = gerarMsgId();
				sourceId = msgi.targetId;
				targetId = msgi.sourceId;
				ttl = sp'.configuracao.ttl;
				hops = 0;
				
				enviar REJECTED_NUM_MAX_SUPER_PEERS(msgId, sourceId, targetId, ttl, hops);
			fim
		else
			início
				msgId = gerarMsgId();
				sourceId = msgi.targetId;
				targetId = msgi.sourceId;
				ttl = sp'.configuracao.ttl;
				atributos = {'listaSuperPeers': sp'.listaSuperPeers}
				hops = 0;
				
				enviar ADD_SOURCE_SUPER_PEER(msgId, sourceId, targetId, ttl, hops, atributos);
				
				reservarSlotSuperPeer(spi.id, sp'.configuracao.tempoEsperaRetorno);
			fim;
	
	Entrada:
		msgi = ADD_SOURCE_SUPER_PEER(msgId, sourceId, targetId, ttl, hops, atributos);
	Ação:
		se não slotSuperPeerReservado(msgi.sourceId) então
			inicio
				msgId = gerarMsgId();
				sourceId = msgi.targetId;
				targetId = msgi.sourceId;
				ttl = sp'.configuracao.ttl;
				hops = 0;
					
				enviar TIME_OUT_ADD_SOURCE_SUPER_PEER(msgId, sourceId, targetId, ttl, hops);
				
				cancelar();
			fim
		else
			inicio
				msgId = gerarMsgId();
				sourceId = msgi.targetId;
				targetId = msgi.sourceId;
				ttl = sp'.configuracao.ttl;
				atributos = {'listaSuperPeers': sp'.listaSuperPeers}
				hops = 0;
				
				enviar ADD_TARGET_SUPER_PEER(msgId, sourceId, targetId, ttl, hops, atributos);
				
				atualizarSuperPeers(sourceId)
				atualizarListaSuperPeers(msgi.atributos['listaSuperPeers']
			fim;
	
	Entrada:
		msgi = ADD_TARGET_SUPER_PEER(msgId, sourceId, targetId, ttl, hops, atributos);
	Ação:
		se não slotSuperPeerReservado(msgi.sourceId) então
			inicio
				msgId = gerarMsgId();
				sourceId = msgi.targetId;
				targetId = msgi.sourceId;
				ttl = sp'.configuracao.ttl;
				hops = 0;
					
				enviar TIME_OUT_ADD_TARGET_SUPER_PEER(msgId, sourceId, targetId, ttl, hops);
				
				cancelar();
			fim
		else
			inicio
				msgId = gerarMsgId();
				sourceId = msgi.targetId;
				targetId = msgi.sourceId;
				ttl = sp'.configuracao.ttl;
				atributos = {'listaSuperPeers': sp'.listaSuperPeers}
				hops = 0;
				
				enviar ADD_TARGET_SUPER_PEER(msgId, sourceId, targetId, ttl, hops, atributos);
				
				atualizarSuperPeers(sourceId)
				atualizarListaSuperPeers(msgi.atributos['listaSuperPeers']
			fim;
	
	Entrada:
		msgi = 	TIME_OUT_ADD_TARGET_SUPER_PEER(msgId, sourceId, targetId, ttl, hops)
	Ação:
		cancelar();
		
	Entrada:
		msgi = 	TIME_OUT_ADD_SOURCE_SUPER_PEER(msgId, sourceId, targetId, ttl, hops);
	Ação:
		cancelar();